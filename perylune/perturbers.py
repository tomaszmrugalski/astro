
from perylune import geom

# This file contains several perturbers, each modelling different phenomena.
#
# You can use those perturbers by passing them as ad parameter to propagation, for example:

# times = np.linspace(0, 100 * orb.period, 1000)
# positions = propagate(orb, time.TimeDelta(times), method=cowell, rtol=1e-11, ad=pert_constant_accel(accel) )
#
# or:
#
# orb.propagate(tof, method=cowell, ad=pert_solar_sail(accel), rtol=1e-11)

# Perturber 1: This is a constant forward acceleration. This could model an ion engine,
# but it's very simplified. This more like a theoretical model that can be used to prove that
# the perturber really works.
#
# Takes one parameter: accel, expressed in km/s. Accelerates in prograde direction for positive values and
# in the retrograde (breaks) for negative values. Example nice values: 2e-5 - spiral, 2e-4 - fast escape trajectory
#
# Based on poliastro example.
def constant_accel(accel):

    _const_accel = accel # expressed in km/s

    def constant_acc(t0, u, k):
        """ This function is called every time the propagation algorithm needs to determine the perturbation.

        t0 - time in seconds since beginning
        u - state vectors, u[0:2] is r (position), u[3:5] - velocity
        k - GM constant, expressed in km3/s2 (so it's 398600.4418 for Earth)
        return 3 values - x,y,z delta (in km)
        """

        v = u[3:]
        norm_v = (v[0]**2 + v[1]**2 + v[2]**2)**.5 # expressed in km/s
        return _const_accel * v / norm_v

    return constant_acc

# Perturber 2: Solar pressure. Uses solar pressure of the Sun. Parameters:

# solar_rad_pressure = 4.5e-6 # Pascals, or N/m2, source: https://en.wikipedia.org/wiki/Radiation_pressure#Pressures_of_absorption_and_reflection
# area = 4 # sail area in m^2, source: https://pw-sat.pl/wp-content/uploads/2018/11/PW-Sat2-w-liczbach-1.pdf
# mass = 2.5 # mass of the sat in kilograms, source: https://pw-sat.pl/wp-content/uploads/2018/11/PW-Sat2-w-liczbach-1.pdf
# min_angle - minimal angle between velocity and run radiation vector, where the solar sail is turned on
# func - optional function that takes 3 params: def record_point(coords, text, color):
#        coords - x,y,z tuple, text - describes state of the perturber (in shadow? angle, min_angle, whether propusion is running)
def solar_sail(area, mass, min_angle, solar_rad_pressure, func):

    if solar_rad_pressure is None:
        solar_rad_pressure = 4.5e-6 # The value for Earth vicinity

    f = solar_rad_pressure * area # in N (N = kg*m/s^2)

    solar_a = f / mass # In m/s^2

    # The model used requires the value in km/s^2
    solar_a = solar_a / 1000 # in km/s^2
    # To exaggerate the acceleration by a factor of 1000, comment out the line above.

    RE = 6378.137 # Earth radius

    print("Force generated by %f m2 solar sail on %fkg spacecraft generates force %fN, accel of %e m/s" % (area, mass, f, solar_a)) # m/s^2

    def in_shadow(v):
        """ Determines whether an object is in shadow or sunlit. It assumes the Sun is at [147000000,0,0] position. """

        # TODO: See shadow_function in poliastro.core.perturbations,
        #       also see Curtis, algorithm 12.3 (pg. 702)

        if v[0] > 0:
            return False # This spacecraft is above terminator, so it's always lit.
        r = (v[1]**2 + v[2]**2)**.5

        return r < RE # If the spacecraft is farther away from the X axis than the Earth radius, it is above the Earth shadow.

    def velocity_angle(v):

        angle = geom.solar_angle(v,None)
        return angle

    def accel_solar(t0, u, k):
        """ My **guesses** at the parameters:
        t0 - time in seconds since beginning
        u - state vectors, u[0:2] is r (position), u[3:5] - velocity
        k - GM constant, expressed in km3/s2 (so it's 398600.4418 for Earth)
        return 3 values - x,y,z delta
        """

        r = u[:3]
        v = u[3:]
        #norm_v = (v[0]**2 + v[1]**2 + v[2]**2)**.5 # expressed in km/s

        shad = in_shadow(r)
        angle = velocity_angle(v)

        run_propulsion = angle > min_angle and not shad

        if func is not None:
            func(r, text=str("angle=%f, inshadow=%s propulsion=%s" % (angle, shad, run_propulsion)), color = "red" if run_propulsion else "black")

        # Sun is located as [1.49e+9, 0, 0], so the solar flux pushes towards negative x
        return -solar_a if run_propulsion else 0, 0, 0

    return accel_solar